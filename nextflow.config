manifest {
  name = 'CrossSpecies ORFome'
  version = '1.0.0'
  description = 'Cross Species ORFome workflow'
  homePage = 'https://scale.bio'
}

//// Parameter defaults; Can be set at workflow runtime on the nextflow command-line
// See nextflow_schema.json for description
params {
    
    //// Species to scan for ORFs, i.e. Homo_sapiens (format: Genus_species) (required!)
    species = null

    //// Bed file containing genomic coordinates to get from genome fasta file, (required! if gtf = null)
    bed = null

    ////  GTF file containing genomic coordinates to get from genome fasta file, (required! if bed = null)
    gtf = null
    features = null

    ////  Reference genome fasta file, i.e. path to ref.fasta (not required)
    ref_fasta = null

    //// Reference genome.json (required!)
    genome = null

    //// Output options
    outDir = "ScaleRna.out" // Workflow output directory
    // bamOut = true // Set of false to skip BAM output from STAR
    // fastqOut = false // set to true to publish demultiplexed fastq files to outDir

    //// Sequencing data input.
    // For alignment, either a runfolder (BCL) or a directory with fastq files is required!
    // runFolder = null
    // fastqDir = null 
    // fastqSamplesheet = null // Optional samplesheet for bcl-convert, replacing the auto-generated one

    // 'Reporting'-workflow, i.e. starting from existing alignment results
    // reporting = false // Run only cell-filtering and reporting steps, with optional sample merging
    // resultDir = null // Output directory for previous pipeline run (to combine multiple runs, specify in samples.csv)
    
    
    
    
    

    //// Library structure (barcode locations and sequences).
    // Can be absolute paths or relative to ${projectDir}/references/
    // RNA kit v1.0: "libV1.json"
    // RNA kit v1.1: "libV1.1.json"
    // libStructure = null 

    //// Optional workflow parameters
    // merge = true // Generate merged sample outputs across libraries / plates
    // bclConvertParams = "" //"--bcl-only-lane 1"
    // fastqc = true // Run fastqc on input fastqs

    // starFeature = "GeneFull_Ex50pAS" // What read to transcript overlaps STAR counts (--soloFeatures)
    // starMulti = "PropUnique" // How to handle reads matching multiple genes (--soloMultiMappers)
    // starStrand = "Forward" // Strandedness of RNA reads relative to annotated genes
    
    // trimFastq = true // PolyA trimming with cutadapt
    // trimAdapt = "-a A{8}N{100} -a T{8}N{100}" // Adapters to trim with cutadapt
    // starTrimming = "" // Trimming in STAR (in addition to cutadapt)

    //// Cell Thresholding parameters
    // See modules/createMtx.config for more options
    // minUTC = 100 // Minimum transcript count to consider a barcode as a potential cell
    // cellFinder = false // Compare cell-barcode expression profiles to background to call more cells
    
    // fixedCells = false // Call the top "expectedCells" many barcodes per sample as cells (set in samples.csv)
    // UTC = 0 // Set a fixed threshold above which all barcodes are called (minUTC < X < UTC go to CellFinder if enabled)

    //// Resources and parallelization 
    // splitFastq = false // Split fastqs by PCR and RT wells for increased parallelization
    // Max. resources that can be requested for a single task / process
    // taskMaxMemory = 61.GB
    // taskMaxCpus = 16
    // taskMaxTime = 48.h
    // Number of fastq files per sample grouped together in one STAR job when using splitFastq
    // starGroupSize = 16 
    // bcParserJobs = 10 // Number of bcParser jobs that will get launched 
    
    //// Downstream Analysis
    // Enable preliminary seurat clustering and azimuth cell-type classification
    // seurat = false
    // azimuth = false
    // compSamples = false
    // enables output of UMI count matrices in annData format
    // annData = false

    // internalReport = false
    // help = false
}